generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  status        Boolean
  accounts      Account[]
  sessions      Session[]
  pages         Page[]
  history       History[]
}

model Page {
  id                  String                @id @default(cuid())
  name                String                @unique
  active              Boolean               @default(true)
  createdAt           DateTime              @default(now())
  createdBy           User                  @relation(fields: [authorId], references: [id])
  authorId            String
  route               String                @unique
  history             History[]
  components          Component[]
  pageInputsValues    PageInputsValues[]
  PageComponentsIndex PageComponentsIndex[]
}

model PageComponentsIndex {
  id          String    @id @default(cuid())
  pageId      String
  component   Component @relation(fields: [componentId], references: [id])
  componentId String
  index       Int
  page        Page      @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model PageInputsValues {
  id      String @id @default(cuid())
  page    Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  pageId  String
  input   Input  @relation(fields: [inputId], references: [id], onDelete: Cascade)
  inputId String

  value     String
  createdAt DateTime @default(now())
}

model Component {
  id                  String                @id @default(cuid())
  name                String                @unique
  input               Input[]
  page                Page[]
  PageComponentsIndex PageComponentsIndex[]
  history             History[]
}

model Input {
  id            String             @id @default(cuid())
  name          String
  type          InputsTypes?       @default(text)
  halfRow       Boolean            @default(false)
  required      Boolean            @default(false)
  component     Component          @relation(fields: [componentId], references: [id])
  componentId   String
  selectOptions SelectOption[]
  value         PageInputsValues[]
}

model SelectOption {
  id      String @id @default(cuid())
  name    String
  input   Input  @relation(fields: [inputId], references: [id])
  inputId String
}

model History {
  id          String     @id @default(cuid())
  changeBy    User       @relation(fields: [userId], references: [id])
  userId      String
  changeAt    DateTime   @default(now())
  page        Page?      @relation(fields: [pageId], references: [id])
  pageId      String?    @default("")
  component   Component? @relation(fields: [componentId], references: [id])
  componentId String?    @default("")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum InputsTypes {
  text
  textarea
  email
  date
  number
  checkbox
  radio
  select
}

enum Role {
  USER
  ADMIN
}
