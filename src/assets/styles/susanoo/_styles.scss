@use 'sass:math';

$rem-base: 16px;

@function strip-unit($num) {
    @return math.div($num, $num * 0 + 1);
}

@function convert-to-rem($value, $base-value: $rem-base) {
    $value: math.div(strip-unit($value), strip-unit($base-value)) * 1rem;
    @if ($value == 0rem) {
        $value: 0;
    }
    @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
    $max: length($values);
    @if $max == 1 {
        @return convert-to-rem(nth($values, 1), $base-value);
    }
    $remValues: ();
    @for $i from 1 through $max {
        $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
    }
    @return $remValues;
}

@mixin icon($icon, $font-styles: true) {
    content: $icon;

    @if $font-styles == true {
        font: {
            family: 'icomoon';
            style: normal;
            weight: normal;
            variant: normal;
        }
        speak: never;
        text-transform: none;
        line-height: 1;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
    }
}

@mixin absolute-center() {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

$sus-breakpoints: (
    small: rem-calc(640),
    medium: rem-calc(800),
    large: rem-calc(1200),
    xlarge: rem-calc(1440),
    xxlarge: rem-calc(2560),
);

@mixin media($breakpoint, $mode: 'max') {
    @if map-has-key($sus-breakpoints, $breakpoint) {
        $breakpoint: map-get($sus-breakpoints, $breakpoint);
    }

    @if $mode == 'max' {
        @media only screen and (max-width: #{strip-unit($breakpoint) * 1em}) {
            @content;
        }
    } @else if $mode == 'min' {
        @media only screen and (min-width: #{strip-unit($breakpoint) * 1em}) {
            @content;
        }
    } @else {
        @debug 'ERROR: There are only ' max ' and ' min ' values supported.';
    }
}
